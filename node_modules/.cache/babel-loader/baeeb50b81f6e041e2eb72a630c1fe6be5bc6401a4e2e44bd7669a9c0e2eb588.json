{"ast":null,"code":"// import \"./App.css\";\n// import { useState, useEffect } from \"react\";\n// import Star from \"./Star\";\n// import Loader from \"./Loader\";\n// import MovieDetails from \"./movieDetails\";\n\n// function App() {\n//   const [query, setQuery] = useState(\"\");\n//   const [movieData, setMovieData] = useState(null);\n//   const [favorites, setFavorites] = useState(() => {\n//     const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n//     return savedFavorites ? savedFavorites : [];\n//   });\n//   const [loading, setLoading] = useState(false);\n//   const [selectedMovie, setSelectedMovie] = useState(null); // State to track selected movie\n//   const [showFavorites, setShowFavorites] = useState(false); // State to track if favorites should be displayed\n//   const [showMovieDetails, setShowMovieDetails] = useState(false); // State to track if movie details should be displayed\n\n//   useEffect(() => {\n//     const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n//     if (savedFavorites) {\n//       setFavorites(savedFavorites);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n//   }, [favorites]);\n\n//   const fetchMovie = async (movieName) => {\n//     setLoading(true);\n//     try {\n//       const URL = `http://www.omdbapi.com/?t=${movieName}&apikey=e45311a3`;\n//       const response = await fetch(URL);\n//       const finalData = await response.json();\n\n//       if (finalData.Response === \"False\") {\n//         setMovieData({\n//           Title: \"No movie found\",\n//         });\n//       } else {\n//         setMovieData(finalData);\n//       }\n//     } catch (err) {\n//       console.log(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = () => {\n//     if (query.trim() !== \"\") {\n//       fetchMovie(query);\n//       setSelectedMovie(null); // Reset selected movie when performing new search\n//       setShowFavorites(false); // Hide favorites when performing new search\n//       setShowMovieDetails(false); // Hide movie details when performing new search\n//     }\n//   };\n\n//   const handleMovieClick = (movie) => {\n//     setSelectedMovie(movie);\n//     setMovieData(null); // Clear movieData to avoid showing previous details\n//     setShowFavorites(false); // Hide favorites when selecting a movie\n//     setShowMovieDetails(true); // Show movie details when selecting a movie\n//   };\n\n//   const handleFavoriteToggle = (movie, e) => {\n//     e.stopPropagation(); // Prevent the click event from propagating to the parent elements\n//     setFavorites((prevFavorites) => {\n//       if (prevFavorites.find((fav) => fav.imdbID === movie.imdbID)) {\n//         // Removing from favorites\n//         return prevFavorites.filter((fav) => fav.imdbID !== movie.imdbID);\n//       } else {\n//         // Adding to favorites\n//         return [...prevFavorites, movie];\n//       }\n//     });\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"search-section\">\n//         <input\n//           type=\"text\"\n//           value={query}\n//           onChange={(e) => setQuery(e.target.value)}\n//           placeholder=\"Search for a movie\"\n//           className=\"search-input\"\n//         />\n//         <button onClick={handleSearch} className=\"search-button\">\n//           Search\n//         </button>\n//         <button\n//           onClick={() => {\n//             setShowFavorites(!showFavorites);\n//             setShowMovieDetails(false); // Hide movie details when toggling favorites\n//           }}\n//           className=\"favorites-button\"\n//         >\n//           View Favorites\n//         </button>\n//       </div>\n//       {!showFavorites && !showMovieDetails && (\n//         <div className=\"movies-container\">\n//           {loading ? (\n//             <Loader />\n//           ) : movieData && movieData.Title !== \"No movie found\" ? (\n//             <div className=\"card\" onClick={() => handleMovieClick(movieData)}>\n//               <div\n//                 className=\"star-container\"\n//                 onClick={(e) => e.stopPropagation()}\n//               >\n//                 <Star\n//                   isFavorite={favorites.some(\n//                     (fav) => fav.imdbID === movieData.imdbID\n//                   )}\n//                   onToggle={(e) => handleFavoriteToggle(movieData, e)}\n//                 />\n//               </div>\n//               <h1>{movieData.Title}</h1>\n//               <p>Release Date: {movieData.Released}</p>\n//               {movieData.Poster ? (\n//                 <img src={movieData.Poster} alt={`${movieData.Title} Poster`} />\n//               ) : (\n//                 <p>No poster available</p>\n//               )}\n//             </div>\n//           ) : (\n//             movieData && (\n//               <div className=\"card\">\n//                 <h1>{movieData.Title}</h1>\n//                 <p>{movieData.Error}</p>\n//               </div>\n//             )\n//           )}\n//         </div>\n//       )}\n//       {showFavorites && !showMovieDetails && (\n//         <div className=\"favorites-list\">\n//           <h2>Favorites</h2>\n//           {favorites.length > 0 ? (\n//             favorites.map((movie) => (\n//               <div\n//                 key={movie.imdbID}\n//                 className=\"card\"\n//                 onClick={() => handleMovieClick(movie)}\n//               >\n//                 <div\n//                   className=\"star-container\"\n//                   onClick={(e) => e.stopPropagation()}\n//                 >\n//                   <Star\n//                     isFavorite={true}\n//                     onToggle={(e) => handleFavoriteToggle(movie, e)}\n//                   />\n//                 </div>\n//                 <h3>{movie.Title}</h3>\n//                 {movie.Poster && (\n//                   <img\n//                     src={movie.Poster}\n//                     alt={`${movie.Title} Poster`}\n//                     className=\"card-container\"\n//                   />\n//                 )}\n//               </div>\n//             ))\n//           ) : (\n//             <p>No favorites added yet.</p>\n//           )}\n//         </div>\n//       )}\n//       {showMovieDetails && (\n//         <MovieDetails\n//           movieData={selectedMovie}\n//           onClose={() => {\n//             setSelectedMovie(null);\n//             setShowMovieDetails(false);\n//           }}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Assignment/src/App.js"],"sourcesContent":["// import \"./App.css\";\n// import { useState, useEffect } from \"react\";\n// import Star from \"./Star\";\n// import Loader from \"./Loader\";\n// import MovieDetails from \"./movieDetails\";\n\n// function App() {\n//   const [query, setQuery] = useState(\"\");\n//   const [movieData, setMovieData] = useState(null);\n//   const [favorites, setFavorites] = useState(() => {\n//     const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n//     return savedFavorites ? savedFavorites : [];\n//   });\n//   const [loading, setLoading] = useState(false);\n//   const [selectedMovie, setSelectedMovie] = useState(null); // State to track selected movie\n//   const [showFavorites, setShowFavorites] = useState(false); // State to track if favorites should be displayed\n//   const [showMovieDetails, setShowMovieDetails] = useState(false); // State to track if movie details should be displayed\n\n//   useEffect(() => {\n//     const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n//     if (savedFavorites) {\n//       setFavorites(savedFavorites);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n//   }, [favorites]);\n\n//   const fetchMovie = async (movieName) => {\n//     setLoading(true);\n//     try {\n//       const URL = `http://www.omdbapi.com/?t=${movieName}&apikey=e45311a3`;\n//       const response = await fetch(URL);\n//       const finalData = await response.json();\n\n//       if (finalData.Response === \"False\") {\n//         setMovieData({\n//           Title: \"No movie found\",\n//         });\n//       } else {\n//         setMovieData(finalData);\n//       }\n//     } catch (err) {\n//       console.log(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = () => {\n//     if (query.trim() !== \"\") {\n//       fetchMovie(query);\n//       setSelectedMovie(null); // Reset selected movie when performing new search\n//       setShowFavorites(false); // Hide favorites when performing new search\n//       setShowMovieDetails(false); // Hide movie details when performing new search\n//     }\n//   };\n\n//   const handleMovieClick = (movie) => {\n//     setSelectedMovie(movie);\n//     setMovieData(null); // Clear movieData to avoid showing previous details\n//     setShowFavorites(false); // Hide favorites when selecting a movie\n//     setShowMovieDetails(true); // Show movie details when selecting a movie\n//   };\n\n//   const handleFavoriteToggle = (movie, e) => {\n//     e.stopPropagation(); // Prevent the click event from propagating to the parent elements\n//     setFavorites((prevFavorites) => {\n//       if (prevFavorites.find((fav) => fav.imdbID === movie.imdbID)) {\n//         // Removing from favorites\n//         return prevFavorites.filter((fav) => fav.imdbID !== movie.imdbID);\n//       } else {\n//         // Adding to favorites\n//         return [...prevFavorites, movie];\n//       }\n//     });\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"search-section\">\n//         <input\n//           type=\"text\"\n//           value={query}\n//           onChange={(e) => setQuery(e.target.value)}\n//           placeholder=\"Search for a movie\"\n//           className=\"search-input\"\n//         />\n//         <button onClick={handleSearch} className=\"search-button\">\n//           Search\n//         </button>\n//         <button\n//           onClick={() => {\n//             setShowFavorites(!showFavorites);\n//             setShowMovieDetails(false); // Hide movie details when toggling favorites\n//           }}\n//           className=\"favorites-button\"\n//         >\n//           View Favorites\n//         </button>\n//       </div>\n//       {!showFavorites && !showMovieDetails && (\n//         <div className=\"movies-container\">\n//           {loading ? (\n//             <Loader />\n//           ) : movieData && movieData.Title !== \"No movie found\" ? (\n//             <div className=\"card\" onClick={() => handleMovieClick(movieData)}>\n//               <div\n//                 className=\"star-container\"\n//                 onClick={(e) => e.stopPropagation()}\n//               >\n//                 <Star\n//                   isFavorite={favorites.some(\n//                     (fav) => fav.imdbID === movieData.imdbID\n//                   )}\n//                   onToggle={(e) => handleFavoriteToggle(movieData, e)}\n//                 />\n//               </div>\n//               <h1>{movieData.Title}</h1>\n//               <p>Release Date: {movieData.Released}</p>\n//               {movieData.Poster ? (\n//                 <img src={movieData.Poster} alt={`${movieData.Title} Poster`} />\n//               ) : (\n//                 <p>No poster available</p>\n//               )}\n//             </div>\n//           ) : (\n//             movieData && (\n//               <div className=\"card\">\n//                 <h1>{movieData.Title}</h1>\n//                 <p>{movieData.Error}</p>\n//               </div>\n//             )\n//           )}\n//         </div>\n//       )}\n//       {showFavorites && !showMovieDetails && (\n//         <div className=\"favorites-list\">\n//           <h2>Favorites</h2>\n//           {favorites.length > 0 ? (\n//             favorites.map((movie) => (\n//               <div\n//                 key={movie.imdbID}\n//                 className=\"card\"\n//                 onClick={() => handleMovieClick(movie)}\n//               >\n//                 <div\n//                   className=\"star-container\"\n//                   onClick={(e) => e.stopPropagation()}\n//                 >\n//                   <Star\n//                     isFavorite={true}\n//                     onToggle={(e) => handleFavoriteToggle(movie, e)}\n//                   />\n//                 </div>\n//                 <h3>{movie.Title}</h3>\n//                 {movie.Poster && (\n//                   <img\n//                     src={movie.Poster}\n//                     alt={`${movie.Title} Poster`}\n//                     className=\"card-container\"\n//                   />\n//                 )}\n//               </div>\n//             ))\n//           ) : (\n//             <p>No favorites added yet.</p>\n//           )}\n//         </div>\n//       )}\n//       {showMovieDetails && (\n//         <MovieDetails\n//           movieData={selectedMovie}\n//           onClose={() => {\n//             setSelectedMovie(null);\n//             setShowMovieDetails(false);\n//           }}\n//         />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}