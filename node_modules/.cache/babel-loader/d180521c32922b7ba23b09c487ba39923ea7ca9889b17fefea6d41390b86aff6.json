{"ast":null,"code":"var _jsxFileName = \"C:\\\\Assignment\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import \"./App.css\";\n// import { useState, useEffect } from \"react\";\n// import Star from \"./Star\";\n// import Loader from \"./Loader\";\n\n// function App() {\n//   const [query, setQuery] = useState(\"\");\n//   const [movieData, setMovieData] = useState(null);\n//   const [favorites, setFavorites] = useState(() => {\n//     const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n\n//     return savedFavorites ? savedFavorites : [];\n//   });\n//   const [showFavorites, setShowFavorites] = useState(false);\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n//     if (savedFavorites) {\n//       setFavorites(savedFavorites);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n//   }, [favorites]);\n\n//   const fetchMovie = async (movieName) => {\n//     setLoading(true);\n//     try {\n//       const URL = `http://www.omdbapi.com/?t=${movieName}&apikey=e45311a3`;\n//       const response = await fetch(URL);\n//       const finalData = await response.json();\n\n//       if (finalData.Response === \"False\") {\n//         setMovieData({\n//           Title: \"No movie found\",\n//         });\n//       } else {\n//         setMovieData(finalData);\n//       }\n//     } catch (err) {\n//       console.log(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = () => {\n//     fetchMovie(query);\n//     setShowFavorites(false);\n//   };\n\n//   const handleFavoriteToggle = (movie) => {\n//     setFavorites((prevFavorites) => {\n//       if (prevFavorites.find((fav) => fav.imdbID === movie.imdbID)) {\n//         return prevFavorites.filter((fav) => fav.imdbID !== movie.imdbID);\n//       } else {\n//         return [...prevFavorites, movie];\n//       }\n//     });\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <input\n//         type=\"text\"\n//         value={query}\n//         onChange={(e) => setQuery(e.target.value)}\n//         placeholder=\"Search for a movie\"\n//         className=\"search-input\"\n//       />\n//       <button onClick={handleSearch} className=\"search-button\">\n//         Search\n//       </button>\n//       <button\n//         onClick={() => setShowFavorites(true)}\n//         className=\"favorites-button\"\n//       >\n//         View Favorites\n//       </button>\n//       {loading ? (\n//         <Loader />\n//       ) : showFavorites ? (\n//         <div className=\"favorites-list\">\n//           <h2>Favorites</h2>\n//           {favorites.length > 0 ? (\n//             favorites.map((movie) => (\n//               <div key={movie.imdbID} className=\"card\">\n//                 <div className=\"star-container\">\n//                   <Star\n//                     isFavorite={true}\n//                     onToggle={() => handleFavoriteToggle(movie)}\n//                   />\n//                 </div>\n//                 <h3>{movie.Title}</h3>\n//                 {movie.Poster && (\n//                   <img\n//                     src={movie.Poster}\n//                     alt={`${movie.Title} Poster`}\n//                     className=\"card-container\"\n//                   />\n//                 )}\n//               </div>\n//             ))\n//           ) : (\n//             <p>No favorites added yet.</p>\n//           )}\n//         </div>\n//       ) : (\n//         movieData && (\n//           <div className=\"card\">\n//             <div className=\"star-container\">\n//               <Star\n//                 isFavorite={\n//                   !!favorites.find((fav) => fav.imdbID === movieData.imdbID)\n//                 }\n//                 onToggle={() => handleFavoriteToggle(movieData)}\n//               />\n//             </div>\n//             <h1>{movieData.Title}</h1>\n//             <p>Release Date: {movieData.Released}</p>\n\n//             {movieData.Poster ? (\n//               <img src={movieData.Poster} alt={`${movieData.Title} Poster`} />\n//             ) : (\n//               <p>No poster available</p>\n//             )}\n//           </div>\n//         )\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Star from \"./Star\";\nimport Loader from \"./Loader\";\nimport MovieDetails from \"./movieDetails\"; // Assuming MovieDetails component is imported correctly\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [movieData, setMovieData] = useState(null);\n  const [favorites, setFavorites] = useState(() => {\n    const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n    return savedFavorites ? savedFavorites : [];\n  });\n  const [loading, setLoading] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState(null); // State to track selected movie\n\n  useEffect(() => {\n    const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n    if (savedFavorites) {\n      setFavorites(savedFavorites);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n  }, [favorites]);\n  const fetchMovie = async movieName => {\n    setLoading(true);\n    try {\n      const URL = `http://www.omdbapi.com/?t=${movieName}&apikey=e45311a3`;\n      const response = await fetch(URL);\n      const finalData = await response.json();\n      if (finalData.Response === \"False\") {\n        setMovieData({\n          Title: \"No movie found\"\n        });\n      } else {\n        setMovieData(finalData);\n      }\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSearch = () => {\n    if (query.trim() !== \"\") {\n      fetchMovie(query);\n      setSelectedMovie(null); // Reset selected movie when performing new search\n    }\n  };\n  const handleMovieClick = movie => {\n    setMovieData(null); // Clear movieData to avoid showing previous details\n    setSelectedMovie(movie);\n  };\n  const handleFavoriteToggle = movie => {\n    setFavorites(prevFavorites => {\n      if (prevFavorites.find(fav => fav.imdbID === movie.imdbID)) {\n        return prevFavorites.filter(fav => fav.imdbID !== movie.imdbID);\n      } else {\n        return [...prevFavorites, movie];\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Search for a movie\",\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        className: \"search-button\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setMovieData(null) || setSelectedMovie(null),\n        className: \"clear-button\",\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this) : selectedMovie ? /*#__PURE__*/_jsxDEV(MovieDetails, {\n        movieData: selectedMovie,\n        onClose: () => setSelectedMovie(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this) : movieData && movieData.Title !== \"No movie found\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"star-container\",\n          children: /*#__PURE__*/_jsxDEV(Star, {\n            isFavorite: favorites.some(fav => fav.imdbID === movieData.imdbID),\n            onToggle: () => handleFavoriteToggle(movieData)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: movieData.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Release Date: \", movieData.Released]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), movieData.Poster ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: movieData.Poster,\n          alt: `${movieData.Title} Poster`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No poster available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this) : movieData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: movieData.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: movieData.Error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"favorites-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), favorites.length > 0 ? favorites.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        onClick: () => handleMovieClick(movie),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"star-container\",\n          children: /*#__PURE__*/_jsxDEV(Star, {\n            isFavorite: true,\n            onToggle: () => handleFavoriteToggle(movie)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: movie.Title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 15\n        }, this), movie.Poster && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.Poster,\n          alt: `${movie.Title} Poster`,\n          className: \"card-container\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 17\n        }, this)]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No favorites added yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"S7Xnba5xjh3MGiSIKuKrvf2ItKU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Star","Loader","MovieDetails","jsxDEV","_jsxDEV","App","_s","query","setQuery","movieData","setMovieData","favorites","setFavorites","savedFavorites","JSON","parse","localStorage","getItem","loading","setLoading","selectedMovie","setSelectedMovie","setItem","stringify","fetchMovie","movieName","URL","response","fetch","finalData","json","Response","Title","err","console","log","handleSearch","trim","handleMovieClick","movie","handleFavoriteToggle","prevFavorites","find","fav","imdbID","filter","className","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onClose","isFavorite","some","onToggle","Released","Poster","src","alt","Error","length","map","_c","$RefreshReg$"],"sources":["C:/Assignment/src/App.js"],"sourcesContent":["// import \"./App.css\";\n// import { useState, useEffect } from \"react\";\n// import Star from \"./Star\";\n// import Loader from \"./Loader\";\n\n// function App() {\n//   const [query, setQuery] = useState(\"\");\n//   const [movieData, setMovieData] = useState(null);\n//   const [favorites, setFavorites] = useState(() => {\n//     const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n\n//     return savedFavorites ? savedFavorites : [];\n//   });\n//   const [showFavorites, setShowFavorites] = useState(false);\n//   const [loading, setLoading] = useState(false);\n\n//   useEffect(() => {\n//     const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n//     if (savedFavorites) {\n//       setFavorites(savedFavorites);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n//   }, [favorites]);\n\n//   const fetchMovie = async (movieName) => {\n//     setLoading(true);\n//     try {\n//       const URL = `http://www.omdbapi.com/?t=${movieName}&apikey=e45311a3`;\n//       const response = await fetch(URL);\n//       const finalData = await response.json();\n\n//       if (finalData.Response === \"False\") {\n//         setMovieData({\n//           Title: \"No movie found\",\n//         });\n//       } else {\n//         setMovieData(finalData);\n//       }\n//     } catch (err) {\n//       console.log(err);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSearch = () => {\n//     fetchMovie(query);\n//     setShowFavorites(false);\n//   };\n\n//   const handleFavoriteToggle = (movie) => {\n//     setFavorites((prevFavorites) => {\n//       if (prevFavorites.find((fav) => fav.imdbID === movie.imdbID)) {\n//         return prevFavorites.filter((fav) => fav.imdbID !== movie.imdbID);\n//       } else {\n//         return [...prevFavorites, movie];\n//       }\n//     });\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <input\n//         type=\"text\"\n//         value={query}\n//         onChange={(e) => setQuery(e.target.value)}\n//         placeholder=\"Search for a movie\"\n//         className=\"search-input\"\n//       />\n//       <button onClick={handleSearch} className=\"search-button\">\n//         Search\n//       </button>\n//       <button\n//         onClick={() => setShowFavorites(true)}\n//         className=\"favorites-button\"\n//       >\n//         View Favorites\n//       </button>\n//       {loading ? (\n//         <Loader />\n//       ) : showFavorites ? (\n//         <div className=\"favorites-list\">\n//           <h2>Favorites</h2>\n//           {favorites.length > 0 ? (\n//             favorites.map((movie) => (\n//               <div key={movie.imdbID} className=\"card\">\n//                 <div className=\"star-container\">\n//                   <Star\n//                     isFavorite={true}\n//                     onToggle={() => handleFavoriteToggle(movie)}\n//                   />\n//                 </div>\n//                 <h3>{movie.Title}</h3>\n//                 {movie.Poster && (\n//                   <img\n//                     src={movie.Poster}\n//                     alt={`${movie.Title} Poster`}\n//                     className=\"card-container\"\n//                   />\n//                 )}\n//               </div>\n//             ))\n//           ) : (\n//             <p>No favorites added yet.</p>\n//           )}\n//         </div>\n//       ) : (\n//         movieData && (\n//           <div className=\"card\">\n//             <div className=\"star-container\">\n//               <Star\n//                 isFavorite={\n//                   !!favorites.find((fav) => fav.imdbID === movieData.imdbID)\n//                 }\n//                 onToggle={() => handleFavoriteToggle(movieData)}\n//               />\n//             </div>\n//             <h1>{movieData.Title}</h1>\n//             <p>Release Date: {movieData.Released}</p>\n\n//             {movieData.Poster ? (\n//               <img src={movieData.Poster} alt={`${movieData.Title} Poster`} />\n//             ) : (\n//               <p>No poster available</p>\n//             )}\n//           </div>\n//         )\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Star from \"./Star\";\nimport Loader from \"./Loader\";\nimport MovieDetails from \"./movieDetails\"; // Assuming MovieDetails component is imported correctly\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [movieData, setMovieData] = useState(null);\n  const [favorites, setFavorites] = useState(() => {\n    const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n    return savedFavorites ? savedFavorites : [];\n  });\n  const [loading, setLoading] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState(null); // State to track selected movie\n\n  useEffect(() => {\n    const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\n    if (savedFavorites) {\n      setFavorites(savedFavorites);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"favorites\", JSON.stringify(favorites));\n  }, [favorites]);\n\n  const fetchMovie = async (movieName) => {\n    setLoading(true);\n    try {\n      const URL = `http://www.omdbapi.com/?t=${movieName}&apikey=e45311a3`;\n      const response = await fetch(URL);\n      const finalData = await response.json();\n\n      if (finalData.Response === \"False\") {\n        setMovieData({\n          Title: \"No movie found\",\n        });\n      } else {\n        setMovieData(finalData);\n      }\n    } catch (err) {\n      console.log(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = () => {\n    if (query.trim() !== \"\") {\n      fetchMovie(query);\n      setSelectedMovie(null); // Reset selected movie when performing new search\n    }\n  };\n\n  const handleMovieClick = (movie) => {\n    setMovieData(null); // Clear movieData to avoid showing previous details\n    setSelectedMovie(movie);\n  };\n\n  const handleFavoriteToggle = (movie) => {\n    setFavorites((prevFavorites) => {\n      if (prevFavorites.find((fav) => fav.imdbID === movie.imdbID)) {\n        return prevFavorites.filter((fav) => fav.imdbID !== movie.imdbID);\n      } else {\n        return [...prevFavorites, movie];\n      }\n    });\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"search-section\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder=\"Search for a movie\"\n          className=\"search-input\"\n        />\n        <button onClick={handleSearch} className=\"search-button\">\n          Search\n        </button>\n        <button\n          onClick={() => setMovieData(null) || setSelectedMovie(null)}\n          className=\"clear-button\"\n        >\n          Clear\n        </button>\n      </div>\n      <div className=\"movies-container\">\n        {loading ? (\n          <Loader />\n        ) : selectedMovie ? (\n          <MovieDetails\n            movieData={selectedMovie}\n            onClose={() => setSelectedMovie(null)}\n          />\n        ) : movieData && movieData.Title !== \"No movie found\" ? (\n          <div className=\"card\">\n            <div className=\"star-container\">\n              <Star\n                isFavorite={favorites.some(\n                  (fav) => fav.imdbID === movieData.imdbID\n                )}\n                onToggle={() => handleFavoriteToggle(movieData)}\n              />\n            </div>\n            <h1>{movieData.Title}</h1>\n            <p>Release Date: {movieData.Released}</p>\n            {movieData.Poster ? (\n              <img src={movieData.Poster} alt={`${movieData.Title} Poster`} />\n            ) : (\n              <p>No poster available</p>\n            )}\n          </div>\n        ) : (\n          movieData && (\n            <div className=\"card\">\n              <h1>{movieData.Title}</h1>\n              <p>{movieData.Error}</p>\n            </div>\n          )\n        )}\n      </div>\n      <div className=\"favorites-list\">\n        <h2>Favorites</h2>\n        {favorites.length > 0 ? (\n          favorites.map((movie) => (\n            <div\n              key={movie.imdbID}\n              className=\"card\"\n              onClick={() => handleMovieClick(movie)}\n            >\n              <div className=\"star-container\">\n                <Star\n                  isFavorite={true}\n                  onToggle={() => handleFavoriteToggle(movie)}\n                />\n              </div>\n              <h3>{movie.Title}</h3>\n              {movie.Poster && (\n                <img\n                  src={movie.Poster}\n                  alt={`${movie.Title} Poster`}\n                  className=\"card-container\"\n                />\n              )}\n            </div>\n          ))\n        ) : (\n          <p>No favorites added yet.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,WAAW;AAClB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,YAAY,MAAM,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,MAAM;IAC/C,MAAMe,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;IACpE,OAAOJ,cAAc,GAAGA,cAAc,GAAG,EAAE;EAC7C,CAAC,CAAC;EACF,MAAM,CAACK,OAAO,EAAEC,U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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}